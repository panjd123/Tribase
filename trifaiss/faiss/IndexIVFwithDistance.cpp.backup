#include "IndexIVFwithDistance.h"
#include <faiss/IndexIVF.h>

#include <omp.h>
#include <cstdint>
#include <memory>
#include <mutex>

#include <iostream>
#include <algorithm>
#include <cinttypes>
#include <cstdio>
#include <limits>
#include <memory>

#include <faiss/utils/hamming.h>
#include <faiss/utils/utils.h>

#include <faiss/IndexFlat.h>
#include <faiss/impl/AuxIndexStructures.h>
#include <faiss/impl/CodePacker.h>
#include <faiss/impl/FaissAssert.h>
#include <faiss/impl/IDSelector.h>

namespace faiss {

std::mutex mtx;
IndexIVFwithDistance::IndexIVFwithDistance(
        IndexFlatL2* quantizer,
        size_t d,
        size_t nlist,
        MetricType metric)
        : IndexIVFFlat( quantizer, d, nlist, metric) {
    code_size = sizeof(float) * d;
    by_residual = false;

    // 初始化InvertedListswithDistance对象
    invlistswithdist = new InvertedListswithDistance(nlist, code_size);

    // // 为 quantizer 中的 distances 字段分配空间
    // quantizer->distances = new float[nlist];
}

IndexIVFwithDistance::~IndexIVFwithDistance() {
    // 删除InvertedListswithDistance对象
    delete invlistswithdist;
}

void IndexIVFwithDistance::assign(idx_t n, const float* x, idx_t* labels, idx_t k, float* dis2nearest_center) const {
    std::vector<float> distances(n * k);

    IndexIVFFlat::search(n, x, k, distances.data(), labels);
    std::cout<<"++++++++++++++++++++++++++++"<<std::endl;

    #pragma omp parallel for
    for (idx_t i = 0; i < n; ++i) {
        dis2nearest_center[i] = distances[i * k];
    }
}

void IndexIVFwithDistance::add_core(
        idx_t n,
        const float* x,
        const idx_t* xids,
        const idx_t* coarse_idx,
        const float* dis2nearest_center) {

    for(int i=1;i<=100;i++){
        std::cout<<dis2nearest_center[i]<<std::endl;
    }
    std::cout<<"add_core"<<std::endl;
    FAISS_THROW_IF_NOT(is_trained);
    FAISS_THROW_IF_NOT(coarse_idx);
    FAISS_THROW_IF_NOT(!by_residual);
    assert(invlistswithdist);
    direct_map.check_can_add(xids);

    int64_t n_add = 0;

    DirectMapAdd dm_adder(direct_map, n, xids);

#pragma omp parallel reduction(+ : n_add)
    {
        int nt = omp_get_num_threads();
        int rank = omp_get_thread_num();

        // each thread takes care of a subset of lists
        for (size_t i = 0; i < n; i++) {
            idx_t list_no = coarse_idx[i];

            // 打印list_no和nt的值
            // std::cout << "list_no: " << list_no << ", nt: " << nt << ", rank: " << rank << std::endl;

            if (list_no >= 0 && list_no % nt == rank) {
                // std::cout<<"add_entry"<<std::endl;
                idx_t id = xids ? xids[i] : ntotal + i;
                const float* xi = x + i * d;
                size_t offset =
                        invlistswithdist->add_entry(list_no, id, (const uint8_t*)xi, dis2nearest_center[i]);
                dm_adder.add(i, list_no, offset);
                n_add++;
            } else if (rank == 0 && list_no == -1) {
                dm_adder.add(i, -1, 0);
            }
        }
    }

    if (verbose) {
        printf("IndexIVFwithDistance::add_core: added %" PRId64 " / %" PRId64
               " vectors\n",
               n_add,
               n);
    }
    ntotal += n;

    invlistswithdist->sort_all_lists();
}



// void IndexIVFwithDistance::add_with_ids(
//     idx_t n,
//     const float* x,
//     const idx_t* xids) {
//     std::cout<<"IndexIVFwithDistance::add_with_ids"<<std::endl;
//     std::unique_ptr<idx_t[]> coarse_idx(new idx_t[n]);
//     std::unique_ptr<float[]> dis2nearest_center(new float[n]);
//     std::cout << "quantizer: " << quantizer << std::endl;
//     quantizer->assign(n, x, coarse_idx.get(), 1, dis2nearest_center.get());
//     add_core(n, x, xids, coarse_idx.get(), dis2nearest_center.get());
// }

void IndexIVFwithDistance::add_with_ids(
    idx_t n,
    const float* x,
    const idx_t* xids) {
    std::cout<<"IndexIVFwithDistance::add_with_ids"<<std::endl;
    std::unique_ptr<idx_t[]> coarse_idx(new idx_t[n]);
    std::unique_ptr<float[]> dis2nearest_center(new float[n]);
    std::cout << "quantizer: " << quantizer << std::endl;
    
    // 确保quantizer确实是IndexFlatL2类型
    auto flat_quantizer = dynamic_cast<faiss::IndexFlatL2*>(quantizer);
    if (flat_quantizer != nullptr) {
        // 调用IndexFlatL2的assign方法
        flat_quantizer->assign(n, x, coarse_idx.get(), 1, dis2nearest_center.get());
        add_core(n, x, xids, coarse_idx.get(), dis2nearest_center.get());
    } else {
        std::cerr << "Quantizer is not of type IndexFlatL2" << std::endl;
        // 处理错误
    }
}




void IndexIVFwithDistance::add(idx_t n, const float* x) {
    std::cout<<"IndexIVFwithDistance::add"<<std::endl;
    add_with_ids(n, x, nullptr);
}

// void IndexIVFwithDistance::range_search_preassigned(
//         idx_t nx,
//         const float* x,
//         float radius,
//         const idx_t* keys,
//         const float* coarse_dis,
//         RangeSearchResult* result,
//         bool store_pairs,
//         const IVFSearchParameters* params,
//         IndexIVFStats* stats) const {
//     IndexIVFFlat::range_search_preassigned(nx, x, radius, keys, coarse_dis, result, store_pairs, params, stats);
// }


// void IndexIVFwithDistance::encode_vectors(
//         idx_t n,
//         const float* x,
//         const idx_t* list_nos,
//         uint8_t* codes,
//         bool include_listnos) const {
//     FAISS_THROW_IF_NOT(!by_residual);
//     if (!include_listnos) {
//         memcpy(codes, x, code_size * n);
//     } else {
//         size_t coarse_size = coarse_code_size();
//         for (size_t i = 0; i < n; i++) {
//             int64_t list_no = list_nos[i];
//             uint8_t* code = codes + i * (code_size + coarse_size);
//             const float* xi = x + i * d;
//             if (list_no >= 0) {
//                 encode_listno(list_no, code);
//                 memcpy(code + coarse_size, xi, code_size);
//             } else {
//                 memset(code, 0, code_size + coarse_size);
//             }
//         }
//     }
// }


/** It is a sad fact of software that a conceptually simple function like this
 * becomes very complex when you factor in several ways of parallelizing +
 * interrupt/error handling + collecting stats + min/max collection. The
 * codepath that is used 95% of time is the one for parallel_mode = 0 */
void IndexIVFwithDistance::search(
        idx_t n,
        const float* x,
        idx_t k,
        float* distances,
        idx_t* labels,
        const SearchParameters* params_in) {
    std::cout<<"in search"<<std::endl;

    // 创建一个数组来保存每个查询向量的估计值
    estimates.resize(n);

    // for(int i=0;i<invlistswithdist->nlist;i++){
    //     std::cout<<"nvlists->is_empty() "<<i<<" : "<<invlistswithdist->is_empty(i)<<std::endl;
    //     std::cout<<"nvlists->list_size() "<<i<<" : "<<invlistswithdist->list_size(i)<<std::endl;
    // }
    
    FAISS_THROW_IF_NOT(k > 0);
    const IVFSearchParameters* params = nullptr;
    if (params_in) {
        params = dynamic_cast<const IVFSearchParameters*>(params_in);
        FAISS_THROW_IF_NOT_MSG(params, "IndexIVF params have incorrect type");
    }
    const size_t nprobe =
            std::min(nlist, params ? params->nprobe : this->nprobe);
    FAISS_THROW_IF_NOT(nprobe > 0);

    // search function for a subset of queries
    auto sub_search_func = [this, k, nprobe, params](
                                   idx_t n,
                                   const float* x,
                                   float* distances,
                                   idx_t* labels,
                                   IndexIVFStats* ivf_stats) {
        std::unique_ptr<idx_t[]> idx(new idx_t[n * nprobe]);
        std::unique_ptr<float[]> coarse_dis(new float[n * nprobe]);

        double t0 = getmillisecs();
        quantizer->search(
                n,
                x,
                nprobe,
                coarse_dis.get(),
                idx.get(),
                params ? params->quantizer_params : nullptr);


        //给每个向量估计一个上界，coarse_dis[i*nprobe]是最近聚类中心的距离
        //这里要做的是get_single_distance(idx[i*nprobe],k);的k可能越界，这个还要放在一个循环里面
        #pragma omp for 
        for(int i=0;i<n;i++){
            estimates[i]=coarse_dis[i*nprobe]+invlistswithdist->get_single_distance(idx[i*nprobe],k);
        }

        double t1 = getmillisecs();
        invlistswithdist->prefetch_lists(idx.get(), n * nprobe);

        search_preassigned(
                n,
                x,
                k,
                idx.get(),
                coarse_dis.get(),
                distances,
                labels,
                false,
                params,
                ivf_stats);
        double t2 = getmillisecs();
        ivf_stats->quantization_time += t1 - t0;
        ivf_stats->search_time += t2 - t0;
    };

    if ((parallel_mode & ~PARALLEL_MODE_NO_HEAP_INIT) == 0) {

        std::cout<<"in this??????????"<<std::endl;
        int nt = std::min(omp_get_max_threads(), int(n));
        std::vector<IndexIVFStats> stats(nt);
        std::mutex exception_mutex;
        std::string exception_string;

#pragma omp parallel for if (nt > 1)
        for (idx_t slice = 0; slice < nt; slice++) {
            IndexIVFStats local_stats;
            idx_t i0 = n * slice / nt;
            idx_t i1 = n * (slice + 1) / nt;
            if (i1 > i0) {
                try {
                    sub_search_func(
                            i1 - i0,
                            x + i0 * d,
                            distances + i0 * k,
                            labels + i0 * k,
                            &stats[slice]);
                } catch (const std::exception& e) {
                    std::lock_guard<std::mutex> lock(exception_mutex);
                    exception_string = e.what();
                }
            }
        }

        if (!exception_string.empty()) {
            FAISS_THROW_MSG(exception_string.c_str());
        }

        // collect stats
        for (idx_t slice = 0; slice < nt; slice++) {
            indexIVF_stats.add(stats[slice]);
        }
    } else {
        // handle parallelization at level below (or don't run in parallel at
        // all)
        sub_search_func(n, x, distances, labels, &indexIVF_stats);
    }
    std::cout<<"total_skip_count: "<<total_skip_count<<std::endl;
    std::cout<<"total_count: "<<total_count<<std::endl;
}

void IndexIVFwithDistance::search_preassigned(
        idx_t n,
        const float* x,
        idx_t k,
        const idx_t* keys,
        const float* coarse_dis,
        float* distances,
        idx_t* labels,
        bool store_pairs,
        const IVFSearchParameters* params,
        IndexIVFStats* ivf_stats) {
    size_t skip_count = 0;
    std::cout<<"search_preassigned"<<std::endl;
    FAISS_THROW_IF_NOT(k > 0);

    idx_t nprobe = params ? params->nprobe : this->nprobe;
    nprobe = std::min((idx_t)nlist, nprobe);
    FAISS_THROW_IF_NOT(nprobe > 0);
    
    const idx_t unlimited_list_size = std::numeric_limits<idx_t>::max();
    idx_t max_codes = params ? params->max_codes : this->max_codes;
    IDSelector* sel = params ? params->sel : nullptr;
    const IDSelectorRange* selr = dynamic_cast<const IDSelectorRange*>(sel);
    if (selr) {
        if (selr->assume_sorted) {
            sel = nullptr; // use special IDSelectorRange processing
        } else {
            selr = nullptr; // use generic processing
        }
    }

    FAISS_THROW_IF_NOT_MSG(
            !(sel && store_pairs),
            "selector and store_pairs cannot be combined");

    FAISS_THROW_IF_NOT_MSG(
            !invlistswithdist->use_iterator || (max_codes == 0 && store_pairs == false),
            "iterable inverted lists don't support max_codes and store_pairs");

    size_t nlistv = 0, ndis = 0, nheap = 0;

    using HeapForIP = CMin<float, idx_t>;
    using HeapForL2 = CMax<float, idx_t>;

    bool interrupt = false;
    std::mutex exception_mutex;
    std::string exception_string;

    int pmode = this->parallel_mode & ~PARALLEL_MODE_NO_HEAP_INIT;
    bool do_heap_init = !(this->parallel_mode & PARALLEL_MODE_NO_HEAP_INIT);

    FAISS_THROW_IF_NOT_MSG(
            max_codes == 0 || pmode == 0 || pmode == 3,
            "max_codes supported only for parallel_mode = 0 or 3");

    if (max_codes == 0) {
        max_codes = unlimited_list_size;
    }

    bool do_parallel = omp_get_max_threads() >= 2 &&
            (pmode == 0           ? false
                     : pmode == 3 ? n > 1
                     : pmode == 1 ? nprobe > 1
                                  : nprobe * n > 1);


    
#pragma omp parallel if (do_parallel) reduction(+ : nlistv, ndis, nheap)
    {
        InvertedListScanner* scanner =
                get_InvertedListScanner(store_pairs, sel);
        ScopeDeleter1<InvertedListScanner> del(scanner);
        
        /*****************************************************
         * Depending on parallel_mode, there are two possible ways
         * to organize the search. Here we define local functions
         * that are in common between the two
         ******************************************************/

        // initialize + reorder a result heap

        auto init_result = [&](float* simi, idx_t* idxi) {
            if (!do_heap_init){
                return;
            }
            if (metric_type == METRIC_INNER_PRODUCT) {
                heap_heapify<HeapForIP>(k, simi, idxi);
            } else {
                heap_heapify<HeapForL2>(k, simi, idxi);
            }
        };
        
        // std::cout<<"success in 0"<<std::endl;
        auto add_local_results = [&](const float* local_dis,
                                     const idx_t* local_idx,
                                     float* simi,
                                     idx_t* idxi) {
            if (metric_type == METRIC_INNER_PRODUCT) {
                heap_addn<HeapForIP>(k, simi, idxi, local_dis, local_idx, k);
            } else {
                heap_addn<HeapForL2>(k, simi, idxi, local_dis, local_idx, k);
            }
        };

        // std::cout<<"success in 1"<<std::endl;
        auto reorder_result = [&](float* simi, idx_t* idxi) {
            if (!do_heap_init)
                return;
            if (metric_type == METRIC_INNER_PRODUCT) {
                heap_reorder<HeapForIP>(k, simi, idxi);
            } else {
                heap_reorder<HeapForL2>(k, simi, idxi);
            }
        };
        // std::cout<<"success in 2"<<std::endl;
        // single list scan using the current scanner (with query
        // set porperly) and storing results in simi and idxi
        auto scan_one_list = [&](idx_t key,
                                 float coarse_dis_i,
                                 float* simi,
                                 idx_t* idxi,
                                 idx_t list_size_max,
                                 float estimate_diff) {
        // auto scan_one_list = [&](idx_t key,
        //                          float coarse_dis_i,
        //                          float* simi,
        //                          idx_t* idxi,
        //                          idx_t list_size_max) {
            // std::cout<<"simi[0]"<<simi[0]<<std::endl;
            // float estimate_diff = coarse_dis_i - estimates[i];
            if (key < 0) {
                // std::cout<<"key->is_empty"<<std::endl;
                // not enough centroids for multiprobe
                return (size_t)0;
            }
            FAISS_THROW_IF_NOT_FMT(
                    key < (idx_t)nlist,
                    "Invalid key=%" PRId64 " nlist=%zd\n",
                    key,
                    nlist);

            // don't waste time on empty lists
            if (invlistswithdist->is_empty(key)) {
                // std::cout<<"invlistswithdist->is_empty"<<std::endl;
                return (size_t)0;
            }
            scanner->set_list(key, coarse_dis_i);

            nlistv++;

            try {
                 if (invlistswithdist->use_iterator) {
                    std::cout<<"unsuccess"<<std::endl;
                    size_t list_size = 0;

                    std::unique_ptr<InvertedListsIterator> it(
                            invlistswithdist->get_iterator(key));

                    nheap += scanner->iterate_codes(
                            it.get(), simi, idxi, k, list_size);

                    return list_size;
                } else {
                    size_t list_size = invlistswithdist->list_size(key);
                    if (list_size > list_size_max) {
                        list_size = list_size_max;
                    }

                    InvertedLists::ScopedCodes scodes(invlistswithdist, key);
                    const uint8_t* codes = scodes.get();

                    std::unique_ptr<InvertedLists::ScopedIds> sids;
                    const idx_t* ids = nullptr;

                    if (!store_pairs) {
                        sids = std::make_unique<InvertedLists::ScopedIds>(
                                invlistswithdist, key);
                        ids = sids->get();
                    }

                    if (selr) { // IDSelectorRange
                        // restrict search to a section of the inverted list
                        size_t jmin, jmax;
                        selr->find_sorted_ids_bounds(
                                list_size, ids, &jmin, &jmax);
                        list_size = jmax - jmin;
                        if (list_size == 0) {
                            return (size_t)0;
                        }
                        codes += jmin * code_size;
                        ids += jmin;
                    }

                    const float* dists = invlistswithdist->get_distances(key);

                    size_t skip_count = 0;
                    for (size_t j = 0; j < list_size; j++) {
                        if (simi[0] < coarse_dis_i - dists[j]) {
                            skip_count++;
                            
                        } else {
                            break;
                        }
                    }  

                    //这里是看剪枝率
                    {
                        std::lock_guard<std::mutex> lock(mtx);  // 获取锁
                        total_skip_count += skip_count;  // 更新total_skip_count
                    }
                    {
                        std::lock_guard<std::mutex> lock(mtx);  // 获取锁
                        total_count += list_size;  // 更新total_skip_count
                    }


                    // 调整list_size、codes和ids
                    list_size -= skip_count;
                    codes += skip_count * code_size;
                    if (!store_pairs) {
                        ids += skip_count;
                    }

                    nheap += scanner->scan_codes(
                            list_size, codes, ids, simi, idxi, k);
                    // std::cout<<"simi[0]"<<simi[0]<<std::endl;
                    return list_size;
                }
            } catch (const std::exception& e) {
                std::lock_guard<std::mutex> lock(exception_mutex);
                exception_string =
                        demangle_cpp_symbol(typeid(e).name()) + "  " + e.what();
                interrupt = true;
                return size_t(0);
            }
        };

        /****************************************************
         * Actual loops, depending on parallel_mode
         ****************************************************/

        if (pmode == 0 || pmode == 3) {
        float* simi;
#pragma omp for private(simi)
            for (idx_t i = 0; i < n; i++) {
                if (interrupt) {
                    continue;
                }

                // loop over queries
                scanner->set_query(x + i * d);
                float* simi = distances + i * k;
                idx_t* idxi = labels + i * k;

                init_result(simi, idxi);

                idx_t nscan = 0;
                idx_t times_scan_one_list=0;
                // loop over probes
                //simi0 表示前K个数最大距离
                // simi[0]=estimates[i];
                // std::cout<<"simi[0]"<<simi[0]<<std::endl;
                // #pragma omp critical
                for (size_t ik = 0; ik < nprobe; ik++) {

                    // float estimate_diff = simi[0];
                    float estimate_diff = coarse_dis[i * nprobe + ik] - simi[0];


                    // if (omp_get_thread_num() == 0) {
                    //     std::cout << "Thread " << omp_get_thread_num() << ", i = " << i << ", ik = " << ik << ", simi[0] = " << simi[0] << std::endl;
                    // }
                    
                    // std::cout<<"estimate_diff: "<<estimate_diff<<std::endl;
                    //这里的diff意思是点到这个聚类中心的距离和这个点到目前找到的上界的距离的差，<0应该就不用判断了，但是这里没写跳过，>0要判断
                    
                    // nscan += scan_one_list(
                    //         keys[i * nprobe + ik],
                    //         coarse_dis[i * nprobe + ik],
                    //         simi,
                    //         idxi,
                    //         max_codes - nscan);
                    nscan += scan_one_list(
                            keys[i * nprobe + ik],
                            coarse_dis[i * nprobe + ik],
                            simi,
                            idxi,
                            max_codes - nscan,
                            estimates[i]);
                    times_scan_one_list++;
                    //这里有问题，他这里做了个剪枝，小东西
                    if (nscan >= max_codes) {
                        std::cout<<"times_scan_one_list:"<<times_scan_one_list<<std::endl;
                        break;
                    }
                }

                ndis += nscan;
                reorder_result(simi, idxi);

                if (InterruptCallback::is_interrupted()) {
                    interrupt = true;
                }

            } // parallel for
        } else if (pmode == 1) {
            std::vector<idx_t> local_idx(k);
            std::vector<float> local_dis(k);

            for (size_t i = 0; i < n; i++) {
                scanner->set_query(x + i * d);
                init_result(local_dis.data(), local_idx.data());

#pragma omp for schedule(dynamic)
                for (idx_t ik = 0; ik < nprobe; ik++) {
                    float estimate_diff ;
                    ndis += scan_one_list(
                            keys[i * nprobe + ik],
                            coarse_dis[i * nprobe + ik],
                            local_dis.data(),
                            local_idx.data(),
                            unlimited_list_size,
                            estimate_diff);


                    // can't do the test on max_codes
                }
                // merge thread-local results

                float* simi = distances + i * k;
                idx_t* idxi = labels + i * k;
#pragma omp single
                init_result(simi, idxi);

#pragma omp barrier
#pragma omp critical
                {
                    add_local_results(
                            local_dis.data(), local_idx.data(), simi, idxi);
                }
#pragma omp barrier
#pragma omp single
                reorder_result(simi, idxi);
            }
        } else if (pmode == 2) {
            std::vector<idx_t> local_idx(k);
            std::vector<float> local_dis(k);

#pragma omp single
            for (int64_t i = 0; i < n; i++) {
                init_result(distances + i * k, labels + i * k);
            }

#pragma omp for schedule(dynamic)
            for (int64_t ij = 0; ij < n * nprobe; ij++) {
                size_t i = ij / nprobe;
                size_t j = ij % nprobe;

                scanner->set_query(x + i * d);
                init_result(local_dis.data(), local_idx.data());
                float estimate_diff ;
                ndis += scan_one_list(
                        keys[ij],
                        coarse_dis[ij],
                        local_dis.data(),
                        local_idx.data(),
                        unlimited_list_size,
                        estimate_diff);

#pragma omp critical
                {
                    add_local_results(
                            local_dis.data(),
                            local_idx.data(),
                            distances + i * k,
                            labels + i * k);
                }
            }
#pragma omp single
            for (int64_t i = 0; i < n; i++) {
                reorder_result(distances + i * k, labels + i * k);
            }
        } else {
            FAISS_THROW_FMT("parallel_mode %d not supported\n", pmode);
        }
    } // parallel section

    if (interrupt) {
        if (!exception_string.empty()) {
            FAISS_THROW_FMT(
                    "search interrupted with: %s", exception_string.c_str());
        } else {
            FAISS_THROW_MSG("computation interrupted");
        }
    }

    if (ivf_stats == nullptr) {
        ivf_stats = &indexIVF_stats;
    }
    ivf_stats->nq += n;
    ivf_stats->nlist += nlistv;
    ivf_stats->ndis += ndis;
    ivf_stats->nheap_updates += nheap;
}

} // namespace faiss